syntax = "proto3";

package kvstore;

// KV Store service definition
service KVStore {
  // Basic CRUD operations
  rpc Get(GetRequest) returns (GetResponse);
  rpc Set(SetRequest) returns (SetResponse);
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  rpc Exists(ExistsRequest) returns (ExistsResponse);
  rpc Keys(KeysRequest) returns (KeysResponse);
  
  // Distributed system operations
  rpc Replicate(ReplicateRequest) returns (ReplicateResponse);
  rpc SyncData(SyncDataRequest) returns (SyncDataResponse);
  rpc RegisterReplica(RegisterReplicaRequest) returns (RegisterReplicaResponse);
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
}

// Basic operation messages
message GetRequest {
  string key = 1;
}

message GetResponse {
  bool found = 1;
  string value = 2;
}

message SetRequest {
  string key = 1;
  string value = 2;
  int32 ttl = 3;  // Time-to-live in seconds, 0 means no expiration
}

message SetResponse {
  bool success = 1;
}

message DeleteRequest {
  string key = 1;
}

message DeleteResponse {
  bool success = 1;
}

message ExistsRequest {
  string key = 1;
}

message ExistsResponse {
  bool exists = 1;
}

message KeysRequest {
  string pattern = 1;  // Optional pattern to filter keys
}

message KeysResponse {
  repeated string keys = 1;
}

// Distributed system messages
message ReplicateRequest {
  string operation = 1;  // "SET" or "DELETE"
  string key = 2;
  string value = 3;
  int32 ttl = 4;
}

message ReplicateResponse {
  bool success = 1;
}

message SyncDataRequest {
  // Empty request
}

message SyncDataResponse {
  map<string, string> data = 1;
  map<string, double> ttls = 2;  // Key -> TTL remaining in seconds
}

message RegisterReplicaRequest {
  string address = 1;  // Address of the replica (e.g., "localhost:5001")
}

message RegisterReplicaResponse {
  bool success = 1;
  string error = 2;
}

message HeartbeatRequest {
  // Empty request
}

message HeartbeatResponse {
  string status = 1;
  string node_id = 2;
  bool is_master = 3;
}
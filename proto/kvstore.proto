syntax = "proto3";

package kvstore;

// The KVStore service definition
service KVStore {
  // Authentication
  rpc Authenticate (AuthRequest) returns (AuthResponse) {}
  
  // Basic CRUD operations
  rpc Get (GetRequest) returns (GetResponse) {}
  rpc Put (PutRequest) returns (PutResponse) {}
  rpc Delete (DeleteRequest) returns (DeleteResponse) {}
  
  // Leader Election
  rpc RequestVote (VoteRequest) returns (VoteResponse) {}
  rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse) {}
  
  // Replication and Sharding
  rpc Replicate (ReplicateRequest) returns (ReplicateResponse) {}
  rpc TransferShard (ShardTransferRequest) returns (ShardTransferResponse) {}
  
  // Health check and Metadata
  rpc HealthCheck (HealthRequest) returns (HealthResponse) {}
  rpc GetMetadata (MetadataRequest) returns (MetadataResponse) {}
}

// Authentication messages
message AuthRequest {
  string api_key = 1;
}

message AuthResponse {
  bool success = 1;
  string token = 2;
  string error = 3;
}

// CRUD messages
message GetRequest {
  string key = 1;
  string auth_token = 2;
}

message GetResponse {
  string value = 1;
  bool found = 2;
  int64 version = 3;
  string error = 4;
}

message PutRequest {
  string key = 1;
  string value = 2;
  string auth_token = 3;
  int64 version = 4;  // For conflict resolution
}

message PutResponse {
  bool success = 1;
  string error = 2;
  int64 new_version = 3;
}

message DeleteRequest {
  string key = 1;
  string auth_token = 2;
}

message DeleteResponse {
  bool success = 1;
  string error = 2;
}

// Leader Election messages
message VoteRequest {
  string candidate_id = 1;
  int64 term = 2;
  int64 last_log_index = 3;
  int64 last_log_term = 4;
}

message VoteResponse {
  bool vote_granted = 1;
  int64 term = 2;
}

message AppendEntriesRequest {
  string leader_id = 1;
  int64 term = 2;
  repeated LogEntry entries = 3;
  int64 leader_commit = 4;
}

message AppendEntriesResponse {
  bool success = 1;
  int64 term = 2;
}

message LogEntry {
  int64 term = 1;
  string key = 2;
  string value = 3;
  string operation = 4;  // "PUT" or "DELETE"
}

// Sharding messages
message ShardTransferRequest {
  int32 shard_id = 1;
  string source_node = 2;
  string target_node = 3;
  map<string, string> shard_data = 4;
}

message ShardTransferResponse {
  bool success = 1;
  string error = 2;
}

// Metadata messages
message MetadataRequest {}

message MetadataResponse {
  string node_id = 1;
  string role = 2;  // "leader", "follower", "candidate"
  int64 term = 3;
  string leader_id = 4;
  repeated int32 owned_shards = 5;
  map<string, string> shard_allocation = 6;
}

// Replication messages
message ReplicateRequest {
  string key = 1;
  string value = 2;
  string operation = 3;  // "PUT" or "DELETE"
}

message ReplicateResponse {
  bool success = 1;
}

// Health check messages
message HealthRequest {}

message HealthResponse {
  bool healthy = 1;
  string status = 2;
} 
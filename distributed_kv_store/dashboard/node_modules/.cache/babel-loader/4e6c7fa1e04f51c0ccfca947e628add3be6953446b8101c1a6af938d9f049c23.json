{"ast":null,"code":"var _jsxFileName = \"/Users/syedtaha/Desktop/redis/distributed_kv_store/dashboard/src/components/KeyDistributionChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport './KeyDistributionChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction KeyDistributionChart({\n  nodes,\n  nodeStatuses\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const totalKeys = Object.values(nodeStatuses).reduce((sum, status) => sum + ((status === null || status === void 0 ? void 0 : status.key_count) || 0), 0);\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw pie chart\n    let startAngle = 0;\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const radius = Math.min(centerX, centerY) - 20;\n    const colors = ['#4CAF50', '#2196F3', '#FFC107'];\n    nodes.forEach((node, index) => {\n      const status = nodeStatuses[node.id];\n      const keyCount = (status === null || status === void 0 ? void 0 : status.key_count) || 0;\n      const sliceAngle = keyCount / totalKeys * 2 * Math.PI;\n\n      // Draw slice\n      ctx.beginPath();\n      ctx.moveTo(centerX, centerY);\n      ctx.arc(centerX, centerY, radius, startAngle, startAngle + sliceAngle);\n      ctx.closePath();\n      ctx.fillStyle = colors[index % colors.length];\n      ctx.fill();\n\n      // Draw label\n      const labelAngle = startAngle + sliceAngle / 2;\n      const labelRadius = radius * 0.7;\n      const labelX = centerX + Math.cos(labelAngle) * labelRadius;\n      const labelY = centerY + Math.sin(labelAngle) * labelRadius;\n      ctx.fillStyle = '#fff';\n      ctx.font = '14px Arial';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(`${keyCount}`, labelX, labelY);\n      startAngle += sliceAngle;\n    });\n\n    // Draw legend\n    const legendY = canvas.height - 30;\n    nodes.forEach((node, index) => {\n      const x = canvas.width / (nodes.length + 1) * (index + 1);\n\n      // Color box\n      ctx.fillStyle = colors[index % colors.length];\n      ctx.fillRect(x - 30, legendY, 15, 15);\n\n      // Label\n      ctx.fillStyle = '#333';\n      ctx.font = '12px Arial';\n      ctx.textAlign = 'left';\n      ctx.fillText(node.id, x - 10, legendY + 12);\n    });\n  }, [nodes, nodeStatuses]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"key-distribution-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Key Distribution\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 400,\n      height: 300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(KeyDistributionChart, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = KeyDistributionChart;\nexport default KeyDistributionChart;\nvar _c;\n$RefreshReg$(_c, \"KeyDistributionChart\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","KeyDistributionChart","nodes","nodeStatuses","_s","canvasRef","canvas","current","ctx","getContext","totalKeys","Object","values","reduce","sum","status","key_count","clearRect","width","height","startAngle","centerX","centerY","radius","Math","min","colors","forEach","node","index","id","keyCount","sliceAngle","PI","beginPath","moveTo","arc","closePath","fillStyle","length","fill","labelAngle","labelRadius","labelX","cos","labelY","sin","font","textAlign","textBaseline","fillText","legendY","x","fillRect","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/syedtaha/Desktop/redis/distributed_kv_store/dashboard/src/components/KeyDistributionChart.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport './KeyDistributionChart.css';\n\nfunction KeyDistributionChart({ nodes, nodeStatuses }) {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const totalKeys = Object.values(nodeStatuses)\n      .reduce((sum, status) => sum + (status?.key_count || 0), 0);\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw pie chart\n    let startAngle = 0;\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const radius = Math.min(centerX, centerY) - 20;\n\n    const colors = ['#4CAF50', '#2196F3', '#FFC107'];\n\n    nodes.forEach((node, index) => {\n      const status = nodeStatuses[node.id];\n      const keyCount = status?.key_count || 0;\n      const sliceAngle = (keyCount / totalKeys) * 2 * Math.PI;\n\n      // Draw slice\n      ctx.beginPath();\n      ctx.moveTo(centerX, centerY);\n      ctx.arc(centerX, centerY, radius, startAngle, startAngle + sliceAngle);\n      ctx.closePath();\n      ctx.fillStyle = colors[index % colors.length];\n      ctx.fill();\n\n      // Draw label\n      const labelAngle = startAngle + sliceAngle / 2;\n      const labelRadius = radius * 0.7;\n      const labelX = centerX + Math.cos(labelAngle) * labelRadius;\n      const labelY = centerY + Math.sin(labelAngle) * labelRadius;\n\n      ctx.fillStyle = '#fff';\n      ctx.font = '14px Arial';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(`${keyCount}`, labelX, labelY);\n\n      startAngle += sliceAngle;\n    });\n\n    // Draw legend\n    const legendY = canvas.height - 30;\n    nodes.forEach((node, index) => {\n      const x = (canvas.width / (nodes.length + 1)) * (index + 1);\n      \n      // Color box\n      ctx.fillStyle = colors[index % colors.length];\n      ctx.fillRect(x - 30, legendY, 15, 15);\n      \n      // Label\n      ctx.fillStyle = '#333';\n      ctx.font = '12px Arial';\n      ctx.textAlign = 'left';\n      ctx.fillText(node.id, x - 10, legendY + 12);\n    });\n  }, [nodes, nodeStatuses]);\n\n  return (\n    <div className=\"key-distribution-chart\">\n      <h2>Key Distribution</h2>\n      <canvas\n        ref={canvasRef}\n        width={400}\n        height={300}\n      />\n    </div>\n  );\n}\n\nexport default KeyDistributionChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}